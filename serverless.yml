
service: e-neural-crud
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  environment:
    CANDIDATE_TABLE: "candidate-${opt:stage, self:provider.stage}"
    CANDIDATE_EMAIL_TABLE: "candidate-email-${opt:stage, self:provider.stage}"
    # DOMAIN_SUFFIX: "e-neural-${opt:stage, self:provider.stage}"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"

functions:
  tokenValidate:
    handler: api/tokenValidate.handler

  publicEndpoint:
    handler: api/public.list
    memorySize: 128
    description: Lista candidates public.
    events:
      - http:
          path: api/public
          method: get
          cors: true

  candidateSubmission:
    handler: api/candidate.submit
    memorySize: 128
    description: Submit candidate information and starts interview process.
    events:
      - http: 
          path: api/candidates
          method: post
          cors: true
          authorizer: tokenValidate

  listCandidates:
    handler: api/candidate.list
    memorySize: 128
    description: List all candidates
    events:
      - http: 
          path: api/candidates
          method: get
          cors: true
          authorizer: tokenValidate

  candidateDetails:
    handler: api/candidate.get
    memorySize: 128
    description: List id candidate
    events:
      - http:
          path: api/candidates/{id}
          method: get
          cors: true
          authorizer: tokenValidate        

resources:
  Resources:
    CandidatesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"   
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: "NEW_IMAGE"
        TableName: ${self:provider.environment.CANDIDATE_TABLE}
    CandidateEmailDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "email"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "email"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.CANDIDATE_EMAIL_TABLE}

    # httpApi:
    #   DependsOn: serviceUserPool
    # serviceUserPool:
    #   Type: AWS::Cognito::UserPool
    #   Properties:
    #     UserPoolName: service-user-pool-${opt:stage, self:provider.stage}
    #     UsernameAttributes:
    #       - email
    #     AutoVerifiedAttributes:
    #       - email
    # serviceUserPoolClient:
    #   Type: AWS::Cognito::UserPoolClient
    #   Properties:
    #     ClientName: service-user-pool-client-${opt:stage, self:provider.stage}
    #     AllowedOAuthFlows:
    #       - implicit
    #     AllowedOAuthFlowsUserPoolClient: true
    #     AllowedOAuthScopes:
    #       - phone
    #       - email
    #       - openid
    #       - profile
    #       - aws.cognito.signin.user.admin
    #     UserPoolId:
    #       Ref: serviceUserPool
    #     CallbackURLs: 
    #       - https://localhost:3000
    #     ExplicitAuthFlows:
    #       - ALLOW_USER_SRP_AUTH
    #       - ALLOW_REFRESH_TOKEN_AUTH
    #     GenerateSecret: false
    #     SupportedIdentityProviders: 
    #       - COGNITO
    # serviceUserPoolDomain:
    #   Type: AWS::Cognito::UserPoolDomain 
    #   Properties:
    #     UserPoolId: 
    #       Ref: serviceUserPool
    #     Domain: service-user-pool-domain-${opt:stage, self:provider.stage}-${self:provider.environment.DOMAIN_SUFFIX}
