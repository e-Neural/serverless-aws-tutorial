
service: e-neural-crud
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  environment:
    CANDIDATE_TABLE: "candidate-${opt:stage, self:provider.stage}"
    CANDIDATE_EMAIL_TABLE: "candidate-email-${opt:stage, self:provider.stage}"
    CHAT_TABLE: "chat-${opt:stage, self:provider.stage}"
    API_REGION: "${self:provider.region}" 
  iamRoleStatements:
    # - Effect: Allow
    #   Action:
    #     - "execute-api:ManageConnections"
    #   Resource:
    #     - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"

  # optional
  websocketsApiName: websocket-chat-${self:provider.stage}

  # required for websocket apis
  # this selects from your payload what your "routeKey" parameter is
  # from the websocket event types on your function
  websocketsApiRouteSelectionExpression: $request.body.action

# plugins:
#   - serverless-websockets-plugin

functions:
  tokenValidate:
    handler: modules/auth/tokenValidate.handler

  publicEndpoint:
    handler: modules/public/public.list
    memorySize: 128
    description: Lista candidates public.
    events:
      - http:
          path: api/public
          method: get
          cors: true

  candidateSubmission:
    handler: modules/api/candidate.submit
    memorySize: 128
    description: Submit candidate information and starts interview process.
    events:
      - http: 
          path: api/candidates
          method: post
          cors: true
          authorizer: tokenValidate

  listCandidates:
    handler: modules/api/candidate.list
    memorySize: 128
    description: List all candidates
    events:
      - http: 
          path: api/candidates
          method: get
          cors: true
          authorizer: tokenValidate

  candidateDetails:
    handler: modules/api/candidate.get
    memorySize: 128
    description: List id candidate
    events:
      - http:
          path: api/candidates/{id}
          method: get
          cors: true
          authorizer: tokenValidate

  # connectionHandler:
  #   handler: modules/chat/onConnection.handler
  #   events:
  #     - websocket:
  #         route: $connect

  # disconnectionHandler:
  #   handler: modules/chat/onDisconnection.handler
  #   events:
  #     - websocket:
  #         route: $disconnect

  # defaultHandler:
  #   handler: modules/chat/sendMessage.handler
  #   events:
  #     - websocket:
  #         route: message

  sayHelloHandler:
    handler: modules/chat/sendHello.helloHandler
    events:
      - websocket:
          route: hello
          routeResponseSelectionExpression: $default 

resources:
  Resources:
    CandidatesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"   
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: "NEW_IMAGE"
        TableName: ${self:provider.environment.CANDIDATE_TABLE}
    CandidateEmailDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "email"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "email"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.CANDIDATE_EMAIL_TABLE}
